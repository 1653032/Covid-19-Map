{"version":3,"sources":["components/map.js","components/patientinfo.js","components/patientlist.js","components/seekbar.js","App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MyMapComponent","props","Map","style","width","height","center","zoom","TileLayer","attribution","url","markers","patients","map","patient","index","push","Marker","key","position","lat","lng","onClick","bind","Markers","PatientInfo","Row","name","address","note","patientGroup","PatientList","entries","patientVerifyDate","Date","verifyDate","dateString","getDate","getMonth","getFullYear","ref","list","className","curPatient","formatEntry","listStyleType","overflow","maxHeight","Seekbar","startDateFormatted","moment","startDate","maxVal","endDate","diff","marks","value","label","format","add","Slider","classes","valueLabel","rail","track","defaultValue","min","max","onChange","event","valueLabelFormat","x","valueLabelDisplay","step","compare","a","b","date1","date2","App","state","patientListRef","curDate","activePatients","activeRefs","onMarkerClicked","onSeekbarChange","patientIndex","this","parseInt","scrollIntoView","behavior","block","setState","fetch","Headers","then","res","json","result","sortedData","data","slice","sort","refs","Array","lenght","fill","React","createRef","forEach","reduce","acc","isBefore","steps","newCurDate","newrefs","newActivePatients","Container","maxWidth","Col","lg","wordWrap","overflowY","paddingLeft","Height","lineHeight","paddingBottom","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41b3c99f.chunk.js","sourcesContent":["// import React from \"react\"\r\n// import { compose, withProps } from \"recompose\"\r\n// import { withScriptjs, withGoogleMap, GoogleMap, Marker} from \"react-google-maps\"\r\n\r\n\r\n// const Markers = (props) => {\r\n//   let markers= new [];\r\n  \r\n//   props.patients.map((patient,index) => \r\n//     markers.push(\r\n//       <Marker options={{optimized: false}} key={index} position={{ lat: patient['lat'], lng: patient['lng'] }} onClick={props.onClick.bind(null,patient)} index={index}>\r\n//       </Marker>\r\n//     )\r\n//   )\r\n\r\n//   return markers;\r\n// }\r\n\r\n// const MyMapComponent = compose(\r\n//   withProps({\r\n//     googleMapURL: \"https://maps.googleapis.com/maps/api/js?libraries=geometry,drawing,places\",\r\n//     loadingElement: <div style={{ height: `40%`}} />,\r\n//     containerElement: <div style={{ height: `600px` }} />,\r\n//     mapElement: <div style={{ height: `100%` }} />,\r\n\r\n//   }),\r\n//   withScriptjs,\r\n//   withGoogleMap\r\n// )((props) => \r\n//   <GoogleMap\r\n//     defaultZoom={7}\r\n//     defaultCenter={{ lat: 10.7629, lng: 106.6822 }}\r\n//     center={(props.patients)?{lat: props.curPatient.lat,lng: props.curPatient.lng}:{ lat: 10.7629, lng: 106.6822 }}\r\n//   >\r\n//     {Markers(props)}\r\n//   </GoogleMap>\r\n// )\r\n\r\n// export default MyMapComponent\r\nimport React from 'react';\r\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\n\r\nconst Markers = (props) => {\r\n  let markers= [];\r\n  \r\n  props.patients.map((patient,index) => \r\n    markers.push(\r\n      <Marker key={index} position={{ lat: patient['lat'], lng: patient['lng'] }} onClick={props.onClick.bind(null,patient)} index={index}>\r\n      </Marker>\r\n    )\r\n  )\r\n\r\n  return markers;\r\n}\r\n\r\nconst MyMapComponent = (props) => {\r\n    return <Map\r\n    style={{width: '100%',height:'600px'}}\r\n    center={[10.7629,106.6822]} zoom={4}>\r\n        <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png   \"\r\n        />\r\n        {Markers(props)}}\r\n    </Map>;\r\n};\r\n\r\nexport default MyMapComponent;\r\n","import React from \"react\"\r\nimport {Row} from 'react-bootstrap'\r\n\r\n\r\nconst PatientInfo = (props)=>{\r\n    if(props.patient)\r\n        return(\r\n            <div>\r\n                <Row>Name: <span>{props.patient.name}</span></Row>\r\n                <Row>Address: <span>{props.patient.address}</span></Row>\r\n                <Row>Note: <span>{props.patient.note}</span></Row>\r\n                <Row>Group: <span>{props.patient.patientGroup}</span></Row>\r\n            </div>\r\n        );\r\n    else return (\r\n        <div>\r\n            <Row>Name: </Row>\r\n            <Row>Address: </Row>\r\n            <Row>Note : </Row>\r\n            <Row>Group: </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatientInfo","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction formatEntry(props,patient){\r\n    const patientVerifyDate = new Date(patient.verifyDate)\r\n    const dateString = patientVerifyDate.getDate() + '/' + patientVerifyDate.getMonth() + '/' + patientVerifyDate.getFullYear();\r\n    return (\r\n    <li ref={(ref) => {props.list[patient.index] = ref}} key={patient.index}>\r\n        <button className={\"btn btn-default btn-block\" + (props.curPatient === patient?\" btn-primary\":\" btn-outline-secondary\")} onClick={props.onClick.bind(null,patient)}>\r\n            {patient.name} Date:{dateString}\r\n        </button>\r\n    </li>)\r\n}\r\n\r\nfunction PatientList(props){\r\n    let entries = [];\r\n\r\n    props.patients.map((patient,index)=>{\r\n        entries.push(formatEntry(props,patient))\r\n    })\r\n\r\n    if(props.patients)\r\n        return(\r\n            <ul style={{listStyleType:'none',overflow:'auto',maxHeight:'329px'}}>\r\n                {entries}\r\n            </ul>\r\n        )\r\n    else return null;\r\n}\r\n\r\nexport default PatientList","import React from 'react';\r\nimport {Slider} from '@material-ui/core'\r\nimport 'moment'\r\nimport moment from 'moment';\r\nimport './css/seekbar.css'\r\n\r\nfunction Seekbar (props) {\r\n    const startDateFormatted = moment(props.startDate);\r\n    const maxVal = moment(props.endDate).diff(startDateFormatted,'days');\r\n    const marks = [\r\n        {\r\n            value: 0,\r\n            label: startDateFormatted.format('DD/MM/YYYY')\r\n        },\r\n        {\r\n            value: maxVal,\r\n            label: moment(startDateFormatted).add(maxVal,'days').format('DD/MM/YYYY')\r\n        }\r\n    ];\r\n\r\n    return(\r\n        <Slider\r\n        classes={{\r\n            valueLabel: 'value-label',\r\n            rail: 'rail',\r\n            track: 'track'\r\n        }}\r\n        defaultValue={0}\r\n        min={0}\r\n        max={maxVal}\r\n        marks={marks}\r\n        onChange={(event,value)=>props.onChange(value)}\r\n        valueLabelFormat={(x => moment(startDateFormatted).add(x,'days').format('DD/MM/YYYY'))}\r\n        valueLabelDisplay={'on'}\r\n        step={1}\r\n        ></Slider>\r\n    )\r\n}\r\n\r\nexport default Seekbar","import React from 'react';\nimport './App.css';\nimport './components/map.js'\nimport MyMapComponent from './components/map.js';\nimport 'leaflet/dist/leaflet.css';\nimport {Container,Col,Row} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PatientInfo from './components/patientinfo.js'\nimport PatientList from './components/patientlist.js'\nimport Seekbar from './components/seekbar.js'\nimport moment from 'moment'\n\n\nfunction compare(a,b){\n  let date1 = new Date(a.verifyDate);\n  let date2 = new Date(b.verifyDate);\n\n  return (date1<date2) - (date1>date2);\n}\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n\n    this.state={\n      patients: null,\n      curPatient: null,\n      patientListRef: null,\n      startDate: \"2020-01-22T00:00:00\",\n      curDate: null,\n      activePatients: null,\n      activeRefs: null,\n    };\n    this.onMarkerClicked = this.onMarkerClicked.bind(this);\n    this.onSeekbarChange = this.onSeekbarChange.bind(this);\n  }\n\n  onMarkerClicked(patient){\n    const patientIndex = patient.index;\n\n    this.state.patientListRef[parseInt(patientIndex)].scrollIntoView({\n      behavior: 'smooth',\n      block: 'start',\n    });\n\n    this.setState({\n      curPatient: this.state.patients[patientIndex]\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"https://cors-anywhere.herokuapp.com/maps.vnpost.vn/apps/covid19/api/patientapi/list\",\n    {Headers: new Headers({\n      'Origin': 'localhost:3000'\n    })})\n    .then(res => res.json())\n    .then(\n      (result) => {\n        let sortedData = result.data.slice().sort(compare);\n        let refs = Array(result.data.lenght).fill(React.createRef())\n\n        sortedData.forEach((patient,index)=>{\n          patient['index'] = index\n        })\n\n        let activePatients = sortedData.reduce((acc,value)=>{\n          if(moment(value.verifyDate).isBefore(this.state.startDate)){\n            acc.push(value);\n          }\n          return acc;\n        },[]);\n\n        this.setState({\n          patients: sortedData,\n          patientListRef: refs,\n          activePatients: activePatients,\n          curDate: sortedData[0].verifyDate,\n        })\n      },\n    )\n  }\n\n  onSeekbarChange(steps){\n    const newCurDate = moment(this.state.startDate).add(steps,'days');\n    const newrefs = [];\n    const newActivePatients = this.state.patients.reduce((acc,value,index)=>{\n      if(moment(value.verifyDate).isBefore(newCurDate) || value.verifyDate == newCurDate){\n        acc.push(value);\n        newrefs.push(this.state.patientListRef[index]);\n      }\n      return acc;\n    },[])\n\n    this.setState({\n      curDate: newCurDate,\n      activePatients: newActivePatients,\n      activeRefs: newrefs,\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Container style={{maxWidth:'1500px'}}>\n          <Row>\n            <Col lg={8}>\n            <div className=\"display-4 text-md-center\">Corona's Patient Map</div>\n              <div>\n              {this.state.patients && <MyMapComponent onClick={this.onMarkerClicked} patients={this.state.activePatients} curPatient={this.state.curPatient || this.state.patients[0]}/>}\n              </div>\n            </Col>\n            <Col lg={4}>\n              <div className=\"display-4 text-md-center\">Patient Info</div>\n              <Row style={{wordWrap: 'normal',overflowY:'auto',paddingLeft:'15px',Height:'150px',lineHeight:'20px'}}>\n                <div style={{width:'100%',height:'100%'}}>\n                  <PatientInfo patient={this.state.curPatient}></PatientInfo>\n                </div>\n              </Row>\n              <br/>\n              <div className=\"display-4 text-md-center\">Patients List</div>\n              <Row  style={{height: '300px',lineHeight:'25px'}}>\n                <div style={{width:'100%',height:'100%'}}>\n                {this.state.patients && <PatientList list={this.state.patientListRef} onClick={this.onMarkerClicked} curPatient={this.state.curPatient || this.state.patients[0]} patients={this.state.activePatients}></PatientList>}\n                </div>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <div className=\"display-4 text-md-center\" style={{paddingBottom:'85px'}}>Date slider</div>\n            {this.state.patients && <Seekbar onChange={this.onSeekbarChange} startDate={this.state.startDate} endDate={this.state.patients[0].verifyDate}></Seekbar>}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}